/*00
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ahk.manager;

import java.awt.Dimension;
import java.awt.List;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.application.Platform.exit;
import static javafx.scene.input.KeyCode.T;
import javafx.scene.layout.GridPane;
import javax.imageio.ImageIO;
import javax.swing.tree.TreePath;

import javax.swing.JCheckBox;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.*;

/**
 *
 * @author User
 */
public class MainProgram extends javax.swing.JFrame {

    private static String ahkFilePath = "";
    private static String ahkRepoPath = "";
    private static String CONFIG_PATH = "config.properties";
    private static String ICON_PATH = "Icon.png";

    private static int BOOLEAN_COL = 0;
    private static final int NUM_DUMMY_ROWS = 15;

    private static Object colNames[] = {"", "File"};

    private static DefaultTableModel model = new DefaultTableModel(null, colNames) {
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == BOOLEAN_COL) {
                return Boolean.class;
            } else {
                return String.class;
            }
        }
    };

    private static void addLastBindedFile(ArrayList<String> filename) {
        for (Iterator<String> it = filename.iterator(); it.hasNext();) {
            String name = it.next();
            model.addRow(new Object[]{
                true, name
            });
        }
    }

    private static Properties prop;
    private static String getConfigValue(String config) {
        String value = "";
        Properties prop = new Properties();
        InputStream input = null;

        //input = this.getClass().getResourceAsStream(CONFIG_PATH);
        try {
            //input = new FileInputStream(CONFIG_PATH);
            input = new FileInputStream(CONFIG_PATH);

            // load a properties file
            prop.load(input);

            // get the property value and print it out
            value = prop.getProperty(config);
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return value;
    }
    
    private static String getConfigValue0(String config) {
        String value = "";
        
        value= prop.getProperty(config);
        return value;
    }
    
    

    /**
     * Creates new form NewJFrame
     */
    public MainProgram() throws IOException {
        initComponents();
        /////////////////////////////////////////////////////////////////////////////////////////////////
        //prop = new Properties();
        //prop.load(this.getClass().getResourceAsStream("/config.properties"));

        String ahkRun = getConfigValue("ahk_run");
        ArrayList<String> filename = new ArrayList<String>();
        int numFile = 0;

        if (ahkRun.isEmpty() != true) {//list latest binded ahk/s
            if (ahkRun.contains(",")) {
                String[] items = ahkRun.split(",");

                for (String item : items) {
                    filename.add(item);
                }

                numFile = filename.size();
            } else {
                numFile = 1;
                filename.add(ahkRun);
            }

            //remove dummy rows
            removeDummyRows();
            //add selected file
            addLastBindedFile(filename);

            //add dummy row if req-file <15
            fillDummyRows(numFile);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoadFiles = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeAhkFiles = new javax.swing.JTree();
        if (ahkRepoPath.equals("")) {
            jTreeAhkFiles.setVisible(false);
        } else {
            //jTreeAhkFiles.setModel(new FileSystemModel(new File("C:/Users/User/Documents/ahk")));
            jTreeAhkFiles.setModel(new FileSystemModel(new File(ahkRepoPath)));
        }
        jButtonInclude = new javax.swing.JButton();
        jButtonExclude = new javax.swing.JButton();
        jTextFieldAhkRepo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldAhkFile = new javax.swing.JTextField();
        jButtonSavePath = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableIncludedFiles =  new javax.swing.JTable(model);
        jButtonBind = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AHK Manager - Bind Miltiple .ahk");
        setName("frameMain"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnLoadFiles.setText("Load Files");
        btnLoadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFilesActionPerformed(evt);
            }
        });

        jTreeAhkFiles.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTreeAhkFilesFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeAhkFiles);

        jButtonInclude.setText(">>");
        jButtonInclude.setEnabled(false);
        jButtonInclude.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonInclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncludeActionPerformed(evt);
            }
        });

        jButtonExclude.setText("<<");
        jButtonExclude.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonExclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcludeActionPerformed(evt);
            }
        });

        if(!ahkRepoPath.equals("")){
            jTextFieldAhkRepo.setText(ahkRepoPath);
        }

        jTextFieldAhkRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAhkRepoActionPerformed(evt);
            }
        });

        jLabel1.setText("AHK Repo  :");

        jLabel2.setText("AHK File :");

        if(!ahkFilePath.equals("")){
            jTextFieldAhkFile.setText(ahkFilePath);
        }

        jButtonSavePath.setText("Save Path");
        jButtonSavePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSavePathActionPerformed(evt);
            }
        });

        for (int x = 0; x < NUM_DUMMY_ROWS; x++) {
            model.addRow(new Object[]{
                false,""
            });
        }

        jTableIncludedFiles.setAutoCreateRowSorter(true);
        jTableIncludedFiles.setPreferredScrollableViewportSize(new Dimension(320, 160));
        TableColumn tc = jTableIncludedFiles.getColumnModel().getColumn(BOOLEAN_COL);
        tc.setHeaderRenderer(new SelectAllHeader(jTableIncludedFiles, BOOLEAN_COL));
        jScrollPane3.setViewportView(jTableIncludedFiles);

        jButtonBind.setText("Bind AHK");
        jButtonBind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBindActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonBind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldAhkRepo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLoadFiles)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSavePath)
                                .addGap(2, 2, 2))
                            .addComponent(jTextFieldAhkFile)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonInclude, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonExclude, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldAhkFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadFiles)
                    .addComponent(jTextFieldAhkRepo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButtonSavePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonInclude, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jButtonExclude, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBind, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFilesActionPerformed
        // TODO add your handling code here:
        String path = "";

        path = jTextFieldAhkRepo.getText().toString();

        if (path.equals("")) {
            jTreeAhkFiles.setVisible(false);
        } else {

            //jTreeAhkFiles.setModel(new FileSystemModel(new File("C:/Users/User/Documents/ahk")));
            jTreeAhkFiles.setModel(new FileSystemModel(new File(path)));
            jTreeAhkFiles.setVisible(true);
        }
        
        JOptionPane.showMessageDialog(this, "Loading files process done.");
    }//GEN-LAST:event_btnLoadFilesActionPerformed

    private void jTextFieldAhkRepoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAhkRepoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAhkRepoActionPerformed

    private void jButtonSavePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSavePathActionPerformed
        ahkFilePath = jTextFieldAhkFile.getText();
        ahkRepoPath = jTextFieldAhkRepo.getText();

        FileInputStream in = null;
        try {
            in = new FileInputStream(CONFIG_PATH);
            Properties props = new Properties();
            props.load(in);
            in.close();

            FileOutputStream out = new FileOutputStream(CONFIG_PATH);
            props.setProperty("ahk_file", ahkFilePath);
            props.setProperty("ahk_repo", ahkRepoPath);
            props.store(out, null);
            out.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        JOptionPane.showMessageDialog(this, "Saving path process done.");

    }//GEN-LAST:event_jButtonSavePathActionPerformed

    private void jButtonIncludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncludeActionPerformed
        // TODO add your handling code here:
        int state = 0;
        int numFile = 0;

        state = getFileInclutionState();
        switch (state) {
            //fili list empty
            case 0:
                //remove dummy rows
                removeDummyRows();
                //add selected file
                numFile = addSelectedFile();
                //add dummy row if req-file <15
                fillDummyRows(numFile);
                break;

            //fili list not empty
            case 1:
                //get file name in list
                ArrayList<String> filename = new ArrayList<String>();
                filename = getFilenameInList();

                //get selected filename
                ArrayList<String> filename2 = new ArrayList<String>();
                filename2 = getSelectedFilenameInTree();

                //            exit();
                //add pre-exist n selected file to list
                int mod = 0;
                if (filename.size() >= NUM_DUMMY_ROWS) {
                    mod = 1;
                }
                switch (mod) {
                    case 0://existing list has dummy row
                        //remove all rows
                        removeAllRows();
                        addFilesToList(filename, filename2);

                        //add dummy row if req-file <15
                        filename = getFilenameInList();
                        numFile = filename.size();
                        fillDummyRows(numFile);
                        break;
                    case 1://existing list has no dummy row
                        addSelectedFile();
                        break;
                }

                break;
        }

    }//GEN-LAST:event_jButtonIncludeActionPerformed

    private void jButtonExcludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcludeActionPerformed
        // TODO add your handling code here:
        ArrayList<String> filenameInList = new ArrayList<String>();
        ArrayList<String> filenameChecked = new ArrayList<String>();//to be exclude
        ArrayList<Integer> filenameCheckedIndex = new ArrayList<Integer>();//to be exclude

        filenameInList = getFilenameInList();

        int totalRow = model.getRowCount();
        for (int i = 0; i < totalRow; i++) {
            boolean check = false;

            check = (boolean) model.getValueAt(i, 0);
            if (check && model.getValueAt(i, 1).toString().equals("") == false) {
                filenameChecked.add(model.getValueAt(i, 1).toString());
                filenameCheckedIndex.add(i);
            }
        }

        for (String fn : filenameChecked) {
            filenameInList.remove(fn);

            int i = getRowIndex(fn);
            model.removeRow(i);
        }

        fillDummyRows(model.getRowCount());
    }//GEN-LAST:event_jButtonExcludeActionPerformed

    private void jTreeAhkFilesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTreeAhkFilesFocusGained
        // TODO add your handling code here:
        jButtonInclude.setEnabled(true);
    }//GEN-LAST:event_jTreeAhkFilesFocusGained

    private void jButtonBindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBindActionPerformed
        // TODO add your handling code here:
        ArrayList<String> filenameInList = new ArrayList<String>();
        filenameInList = getFilenameInList();

        String allfilename = "";
        for (String fn : filenameInList) {
            allfilename = allfilename + fn + ", ";
        }

        if (allfilename == null || allfilename.length() == 0) {
            return;
        }
        allfilename = allfilename.substring(0, allfilename.length() - 2);

        String content = "";
        String header
                = ";\n"
                + ";Contains : " + allfilename + "\n"
                + ";======\n\n";

        content = content + header;

        try {
            for (String fn : filenameInList) {
                String s = readFile(ahkRepoPath + "/" + fn);

                content += s;
            }

            writeFile(content, ahkFilePath);
        } catch (IOException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        }

        saveFilename(allfilename);

        JOptionPane.showMessageDialog(this, "Bind process done.");
    }//GEN-LAST:event_jButtonBindActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            setIconImage(ImageIO.read(new File(ICON_PATH)));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private String readFile(String pathname) throws IOException {

        File file = new File(pathname);
        StringBuilder fileContents = new StringBuilder((int) file.length());
        Scanner scanner = new Scanner(file);
        String lineSeparator = System.getProperty("line.separator");

        try {
            while (scanner.hasNextLine()) {
                fileContents.append(scanner.nextLine() + lineSeparator);
            }
            return fileContents.toString();
        } finally {
            scanner.close();
        }
    }

    private void writeFile(String content, String path) {
        try {
            String str = "SomeMoreText\nIsHere";
            File newTextFile = new File(path);

            FileWriter fw = new FileWriter(newTextFile);
            fw.write(content);
            fw.close();

        } catch (IOException iox) {
            //do stuff with exception
            iox.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        int env = 1;
        String pre = "";

        switch (env) {
            case 0://nb
                pre = "src/";
                break;
            case 1://.jar
                pre = "./";
                break;
        }

        CONFIG_PATH = pre + CONFIG_PATH;
        ICON_PATH = pre + ICON_PATH;
        //for nb run
//        CONFIG_PATH = "src/config.properties";

        //for .jar
        //CONFIG_PATH = "./config.properties";
        
        ahkFilePath = getConfigValue("ahk_file");
        ahkRepoPath = getConfigValue("ahk_repo");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainProgram().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadFiles;
    private javax.swing.JButton jButtonBind;
    private javax.swing.JButton jButtonExclude;
    private static javax.swing.JButton jButtonInclude;
    private javax.swing.JButton jButtonSavePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JTable jTableIncludedFiles;
    private javax.swing.JTextField jTextFieldAhkFile;
    private javax.swing.JTextField jTextFieldAhkRepo;
    private static javax.swing.JTree jTreeAhkFiles;
    // End of variables declaration//GEN-END:variables

    private int getFileInclutionState() {
        int res = 0;
        int dummyRow = 0;

        int totalCurFile = model.getRowCount();
        for (int i = 0; i < totalCurFile; i++) {
            String rowContent = model.getValueAt(i, 1).toString();
            if (rowContent.isEmpty()) {
                dummyRow += 1;
            }
        }

        totalCurFile = totalCurFile - dummyRow;

        if (totalCurFile > 0) {
            res = 1;
        }

        return res;
    }

    private static void removeDummyRows() {
        for (int i = 0; i < NUM_DUMMY_ROWS; i++) {
            model.removeRow(0);
        }
    }

    private int addSelectedFile() {
        int numFile = 0;
        TreePath[] filepaths = jTreeAhkFiles.getSelectionPaths();

        if (filepaths != null) {
            for (TreePath path : filepaths) {
                if (isPathUnique(path.getLastPathComponent().toString())) {
                    model.addRow(new Object[]{
                        true, path.getLastPathComponent().toString()
                    });
                    numFile += 1;
                }
            }
        }

        return numFile;
    }

    private static void fillDummyRows(int numFile) {
        int numSpace = NUM_DUMMY_ROWS - numFile;

        if (numSpace > 0) {
            for (int i = 0; i < numSpace; i++) {
                model.addRow(new Object[]{
                    false, ""
                });
            }
        }
    }

    private ArrayList<String> getFilenameInList() {
        ArrayList<String> filename = new ArrayList<String>();

        int totalRow = model.getRowCount();
        for (int i = 0; i < totalRow; i++) {
            String rowContent = (String) model.getValueAt(i, 1);
            if (rowContent.isEmpty() == false) {
                filename.add(rowContent);
            }
        }
        return filename;
    }

    private ArrayList<String> getSelectedFilenameInTree() {

        ArrayList<String> filename = new ArrayList<String>();

        TreePath[] filepaths = jTreeAhkFiles.getSelectionPaths();

        if (filepaths != null) {
            for (TreePath path : filepaths) {
                filename.add(path.getLastPathComponent().toString());
            }
        }

        return filename;
    }

    private void addFilesToList(ArrayList<String> filename, ArrayList<String> filename2) {
        ArrayList<String> allFilename = new ArrayList<>();
        for (String fn : filename) {
            if (isPathUnique(fn)) {
                model.addRow(new Object[]{
                    true, fn
                });
            }
        }
        for (String fn : filename2) {
            if (isPathUnique(fn)) {
                model.addRow(new Object[]{
                    true, fn
                });
            }
        }
    }

    private void removeAllRows() {
        int totalRows = model.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            model.removeRow(0);
        }

    }

    private boolean isPathUnique(String path) {
        boolean res = false;
        ArrayList<String> filenameInList = new ArrayList<String>();

        filenameInList = getFilenameInList();

        if (filenameInList.contains(path) == false) {
            res = true;
        }

        return res;
    }

    private void printListItems(ArrayList<String> filenameInList) {
        for (String fn : filenameInList) {
            System.out.println(fn);
        }
    }

    private int getRowIndex(String fn) {
        int res = 0;

        int totalRow = model.getRowCount();
        for (int i = 0; i < totalRow; i++) {
            String valString = model.getValueAt(i, 1).toString();

            if (valString.equals(fn)) {
                res = i;
            }
        }

        return res;
    }

    private void saveFilename(String filenameInList) {
        FileInputStream in = null;
        try {
            in = new FileInputStream(CONFIG_PATH);
            Properties props = new Properties();
            props.load(in);
            in.close();

            FileOutputStream out = new FileOutputStream(CONFIG_PATH);
            props.setProperty("ahk_run", filenameInList);
            props.store(out, null);
            out.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
